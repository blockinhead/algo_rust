struct Solution;
impl Solution {
    pub fn longest_subarray(nums: Vec<i32>) -> i32 {
        let mut num_zeroes = 0;
        let mut right = 0;
        let mut left = 0;

        for v in nums.iter() {
            right += 1;
            if *v == 0 {
                num_zeroes += 1;
            }

            if num_zeroes > 1 {
                if nums[left] == 0 {
                    num_zeroes -= 1;
                }
                left += 1;
            }
        }

        (right - left - 1) as i32
    }
}

pub fn te() {
    println!("{:?}", Solution::longest_subarray([1, 1, 0, 1].into()));
}
// если нужно удалить один элемент, значит можно заменить один ноль на единицу и посчитать макисмальную по длинне последовательность единиц
// так как удалить один элемент надо в любом случае, итоговую длинну уменьшим на 1
// как в 1004
// двигаем правую границу как можно дальше от левой, пока в окно не попадёт второй ноль
// если в окне больше одного нуля, то начинаем двигать левую границу тоже, пока лишний ноль не выпадет
// когда в окне 1 или 0 нулей, левая граница не двигается, правая убегает
